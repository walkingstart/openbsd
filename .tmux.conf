#==========================================
# URL: https://github.com/wklken/k-tmux
# Author:  wklken
# Version: 0.1.1
# Email: wklken@yeah.net
# ReadMe: README.md
# Donation: http://www.wklken.me/pages/donation.html
# Last_modify: 2015-08-06
#==========================================
# Dependecny:
#    1. brew install reattach-to-user-namespace
#    2. gem install tmuxinator
#    3. vim: christoomey/vim-tmux-navigator


#--------------------------- base config begin -------------------------------

# 全局设置
setw -g xterm-keys on
# Using set -gq instead of set -g will silence the unknown option error, while still setting it on old versions of tmux
set -gq status-utf8 on                             # enable utf-8
set-option -g default-terminal "screen-256color"  # use 256 colors
set-option -g history-limit 100000                # scrollback buffer n lines
set-option -g display-time 5000                   # 提示信息的持续时间；设置足够的时间以避免看不清提示，单位为毫秒
set-option -g repeat-time 1000                    # 控制台激活后的持续时间；设置合适的时间以避免每次操作都要先激活控制台，单位为毫秒
set-window-option -g display-panes-time 1500
set-option -g repeat-time 0                       # Allow the arrow key to be used immediately after changing windows

set-option -g renumber-windows on                 # window 0, 1, 2, remove 1, renumber to 0, 1

# Set window notifications
#setw -g monitor-activity on
set -g visual-activity on

# use C-a, since it's on the home row and easier to hit than C-b
set-option -g prefix C-g
unbind-key C-g
bind-key C-g send-prefix
# make `ctrl+a ctrl+a` to move to beginning of the line
bind g send-prefix

# bind a reload key: prefix+r
#bind r source-file ~/.tmux.conf \; display-message "Config reloaded.."

# default shell
#set-option -g default-command /bin/zsh
#set-option -g default-shell /bin/zsh

# clear screen and scrollback history
bind-key -n C-l send-keys C-l \; run 'tmux clear-history'

# -------------------------------- session begin --------------------------------
#bind -r ( switch-client -p
#bind -r ) switch-client -n
# -------------------------------- session end --------------------------------

# -------------------------------- window begin --------------------------------
set-option -g base-index 1                        #窗口的初始序号；默认为0，这里设置为1

set-window-option -g pane-base-index 1            # panes index start at 1, setw means set-window-option
set-window-option -g other-pane-height 25
set-window-option -g other-pane-width 80

# [prefix-c] 创建新窗口
bind-key c new-window
# [prefix-数字] 切换窗口
# [prefix-p] 切换窗口

# select panes
bind-key k select-pane -U
bind-key h select-pane -L
bind-key j select-pane -D
bind-key l select-pane -R

# cycle windows/panes (no prefix)
bind-key -n M-k select-pane -t :.-	# prev pane
bind-key -n M-j select-pane -t :.+	# next pane
bind-key -n M-h select-window -t :-	# previous window
bind-key -n M-l select-window -t :+	# next window

# resize panes
bind-key -r J resize-pane -D 1 
bind-key -r K resize-pane -U 1 
bind-key -r H resize-pane -L 1 
bind-key -r L resize-pane -R 1 

# better pane split bindings with current path (tmux 1.9+)
bind-key = split-window -h #-c "#{pane_current_path}"	# vertical split
bind-key - split-window -v #-c "#{pane_current_path}"	# horizontal split

# new window/pane with the current path (tmux 1.9+)
#bind-key c new-window -c "#{pane_current_path}"

# kill window/pane without prompt
# http://unix.stackexchange.com/a/30283
bind-key & kill-window
bind-key x kill-pane

# layout
# [prefix-space]
# bind-key + select-layout main-horizontal
# bind-key = select-layout main-vertical

# -------------------------------- pane end --------------------------------

# -------------------------------- move/copy/paste begin --------------------------------
# use vi mode
# vi is good  把 Tmux 设为 vi 模式，使其与 Vim 的操作更加接近
#setw -g mode-keys vi

# [ 进入复制，space键开始选择问题  方向键移动， / 回车复制  / ] 黏贴
bind-key [ copy-mode
bind-key ] paste-buffer

# Copy and paste like in vim
# p 换成paste
unbind p
bind p paste-buffer

##-------- Copy Mode (Vim Style) {{{
##------------------------------------------------------
## This section of hotkeys mainly work in copy mode and no where else
#
## vim keys in copy and choose mode
#set-window-option -g mode-keys vi
#
## copying selection vim style
## http://jasonwryan.com/blog/2011/06/07/copy-and-paste-in-tmux/
## https://github.com/myfreeweb/dotfiles/blob/master/tmux.conf
##bind-key Escape copy-mode           # enter copy mode; default [
##bind-key p paste-buffer             # paste; (default hotkey: ] )
##bind-key P choose-buffer            # tmux clipboard history
#bind-key + delete-buffer \; display-message "Deleted current Tmux Clipboard History"
#
## Send To Tmux Clipboard or System Clipboard
#bind-key < run-shell "tmux set-buffer -- \"$(xsel -o -b)\"" \; display-message "Copy To Tmux Clipboard"
#bind-key > run-shell 'tmux show-buffer | xsel -i -b' \; display-message "Copy To System Clipboard"
#
## set the current tmux version (use this variable on if-shell commands)
#run-shell "tmux set-environment -g TMUX_VERSION $(tmux -V | cut -c 6-)"
#
## vim copy mode rebinds for (tmux 2.4+)
## https://shapeshed.com/custom-vim-bindings-in-tmux-2-4/
## https://github.com/tmux/tmux/issues/754#issuecomment-303156000
## https://stackoverflow.com/a/40902312
## Note: rectangle-toggle (aka Visual Block Mode) > hit v then C-v to trigger it
#if-shell -b '[ "$(echo "$TMUX_VERSION >= 2.4" | bc)" = 1 ]' \
#      'bind-key -T copy-mode-vi v send-keys -X begin-selection; \
#        bind-key -T copy-mode-vi V send-keys -X select-line; \
#          bind-key -T copy-mode-vi C-v send-keys -X rectangle-toggle; \
#            bind-key -T choice-mode-vi h send-keys -X tree-collapse ; \
#              bind-key -T choice-mode-vi l send-keys -X tree-expand ; \
#                bind-key -T choice-mode-vi H send-keys -X tree-collapse-all ; \
#                  bind-key -T choice-mode-vi L send-keys -X tree-expand-all ; \
#                    bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe "xclip -in -selection clipboard"; \
#                      bind-key -T copy-mode-vi y send-keys -X copy-pipe "xclip -in -selection clipboard"'
#
## vim copy mode rebinds for (tmux 2.3 or lower)
#if-shell -b '[ "$(echo "$TMUX_VERSION < 2.4" | bc)" = 1 ]' \
#      'bind-key -t vi-copy v begin-selection; \
#        bind-key -t vi-copy V select-line; \
#          bind-key -t vi-copy C-v rectangle-toggle; \
#            bind-key -t vi-choice h tree-collapse; \
#              bind-key -t vi-choice l tree-expand; \
#                bind-key -t vi-choice H tree-collapse-all; \
#                  bind-key -t vi-choice L tree-expand-all; \
#                    bind-key -t vi-copy MouseDragEnd1Pane copy-pipe "xclip -in -selection clipboard"; \
#                      bind-key -t vi-copy y copy-pipe "xclip -in -selection clipboard"'
#
##}}}


# the following vi-copy bindings match my vim settings
#   see https://github.com/gpakosz/.vim.git
# Setup 'v' to begin selection as in Vim
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi C-v send-keys -X rectangle-toggle

bind -T copy-mode-vi 'y' send -X copy-pipe-and-cancel 'xclip -i -selection clipboard'

bind -T copy-mode-vi MouseDragEnd1Pane send -X copy-pipe-and-cancel 'xclip -i -selection clipboard'

bind -n MouseDown2Pane run 'tmux set-buffer "$(xclip -o -selection clipboard)";tmux paste-buffer'
#bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"
#bind-key -T copy-mode-vi Escape send-keys -X cancel
#bind-key -T copy-mode-vi H send-keys -X start-of-line
#bind-key -T copy-mode-vi L send-keys -X end-of-line

# Update default binding of `Enter` to also use copy-pipe
unbind-key -T copy-mode-vi Enter
bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"
# bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"

# for osx
# Enable native Mac OS X copy/paste  对于mac用户，可以复制到系统剪贴板
#set-option -g default-command "/bin/bash -c 'which reattach-to-user-namespace >/dev/null && exec reattach-to-user-namespace $SHELL -l || exec $SHELL -l'"
# -------------------------------- move/copy/paste end --------------------------------

# -------------------------------- mouse begin --------------------------------
# mouse behavior
# Using set -gq instead of set -g will silence the unknown option error, while still setting it on old versions of tmux
setw -gq mode-mouse on
set -gq mouse-select-pane on
set -gq mouse-resize-pane on
set -gq mouse-select-window on
# -------------------------------- mouse end --------------------------------

# -------------------------------- status line begin  --------------------------------
# 颜色
# set-option -g status-bg black
# set-option -g status-fg white

#set -g status-bg '#4e4e4e'
#set -g status-fg '#bbbbbb'
#set -g status-left-fg '#bbbbbb'
#set -g status-left-bg '#4e4e4e'
#set -g status-right-fg '#bbbbbb'
#set -g status-right-bg '#4e4e4e'
#set -g status-style "fg=#bbbbb bg=#4e4e4e"
#set -g status-left-style "fg=#bbbbb bg=#4e4e4e"
#set -g status-right-style "fg=#bbbbb bg=#4e4e4e"

set -g status-left-length 90
set -g status-right-length 60

# 对齐方式
set-option -g status-justify centre

# 左下角
# set-option -g status-left '#[bg=black,fg=green][#[fg=cyan]#S#[fg=green]]'
#set-option -g status-left "S-#S:W-#I:P-#P"
#set-option -g status-left "#[fg=green]Session: #S #[fg=yellow]#I #[fg=cyan]#P"
set -g status-left '#[bg=cyan]#[fg=black](#S) #(whoami)@#(hostname)  '

# 窗口列表
setw -g automatic-rename on
# set-window-option -g window-status-current-fg magenta
#set-window-option -g window-status-format ' #I:#W#F '   #[dim]#I:#[dim]#W#[fg=grey,dim]'
#set-window-option -g window-status-current-format '[#[fg=white,bold]#I#[fg=white,bold]:#[fg=white,bold]#W#[fg=dim]]'
#set-option -g status-fg white
#set-option -g status-bg black
#set-option -g status-attr default
set-option -g status-style "fg=white bg=black default"

# window title colors; non active
#set-window-option -g window-status-fg cyan
#set-window-option -g window-status-bg default
#set-window-option -g window-status-attr dim
set-window-option -g window-status-style "fg=cyan bg=default dim"

# window title colors; active
#set-window-option -g window-status-current-fg white	#font
#set-window-option -g window-status-current-bg red	#boarder
#set-window-option -g window-status-current-attr bright
set-window-option -g window-status-current-style "fg=white bg=red bright"


# 右下角
#set -g status-right '#[fg=green][#[fg=white]%m-%d %H:%M#[fg=green]]'
#set-option -g status-right "#[fg=blue]#(~/battery Discharging) | #[fg=cyan]%a %D %l:%M:%p"
#set -g status-right '#[bg=magenta]#[fg=black] #(cut -d " " -f 1-3 /proc/loadavg) #[default] #[fg=yellow]%H:%M:%S %D #[default]'
#set -g status-right '#[fg=yellow]%H:%M:%S %D #[default]'


# -------------------------------- status line end --------------------------------
# -------------------------------- color begin --------------------------------

# pane border colors
#set-option -g pane-active-border-fg '#55ff55'
#set-option -g pane-border-fg '#555555'

# set -g pane-border-fg colour245
# set -g pane-active-border-fg colour39

# -------------------------------- color end --------------------------------

#--------------------------- base config end -------------------------------

